!https://jenkins.anrisoftware.com/job/globalpom-log-public/job/master/badge/icon(Build Status)!:https://jenkins.anrisoftware.com/job/globalpom-log-public/job/master !https://sonarqube.anrisoftware.com/api/badges/gate?key=com.anrisoftware.globalpom%3Aglobalpom-log(Quality Gate)!:https://sonarqube.anrisoftware.com/dashboard?id=com.anrisoftware.globalpom%3Aglobalpom-log !https://project.anrisoftware.com/attachments/download/217/apache2.0-small.gif(Apache License, Version 2.0)!:http://www.apache.org/licenses/LICENSE-2.0 © 2011-2018 Erwin Müller

h1. Description

Logger factory to inject a logger for a class.

h1. Links

* "Generated Site":https://javadoc.anrisoftware.com/com.anrisoftware.globalpom/globalpom-log/4.5.1/globalpom-log/
* "Download (Central)":https://search.maven.org/artifact/com.anrisoftware.globalpom/globalpom-log/4.5.1/pom
* "Source code":https://gitea.anrisoftware.com/anrisoftware.com/globalpom-log.git
* "Source code (Github)":https://github.com/devent/globalpom-log
* "Project Home":https://project.anrisoftware.com/projects/globalpom-log
* "Project Roadmap":https://project.anrisoftware.com/projects/globalpom-log/roadmap
* "Project Issues":https://project.anrisoftware.com/projects/globalpom-log/issues
* "Jenkins":https://jenkins.anrisoftware.com/job/globalpom-log-public
* "SonarQube":https://sonarqube.anrisoftware.com/dashboard?id=com.anrisoftware.globalpom%3Aglobalpom-log

h1. Packages Overview

!https://project.anrisoftware.com/attachments/download/445/packages.svg(Packages Overview)!

h1. Examples

The logging framework makes it easier to separate logging messages from the production code. Instead of having logging messages all around the code, the messages are all put together in one logging class and the class is injected into the client class.

<pre class="source">
/**
 * Logging messages for {@link Foo}.
 */
@Singleton
class FooLogger extends AbstractLogger {

    /**
     * Create logger for {@link Foo}.
     */
    FooLogger() {
        super(Foo.class);
    }

    void loggingMessage(Foo foo) {
        if (isDebugEnabled()) {
            debug("Debug logging message for {}.", foo);
        } else {
            info("Info logging message for {}.", foo);
        }
    }
}

/**
 * Production class.
 */
class Foo {

    @Inject
    private FooLogger log;

    public void method() {
        log.loggingMessage(this);
    }
}
</pre>

For static logging messages a simple enumeration can be defined and the constants used as logging messages strings. The enumeration must be package public so that Java's static imports can be used to simplify the code.

<pre class="source">
/**
 * Logging messages for {@link Foo}.
 */
@Singleton
class FooLogger extends AbstractLogger {

    enum m {

        logging_message_debug("Debug logging message for {}."),

        logging_message_info("Info logging message for {}.");

        private String name;

        private m(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }
    }

    /**
     * Create logger for {@link Foo}.
     */
    FooLogger() {
        super(Foo.class);
    }

    void loggingMessage(Foo foo) {
        if (isDebugEnabled()) {
            debug(logging_message_debug, foo);
        } else {
            info(logging_message_info, foo);
        }
    }
}
</pre>

Further, to dynamically load logging messages with internationalization support, the resources-texts project can be used.

<pre class="source">
/**
 * Logging messages for {@link Foo}.
 */
@Singleton
class FooLogger extends AbstractLogger {

    enum m {

        logging_message_debug,

        logging_message_info;

        /**
         * Retrieves the text resources for the logging messages.
         *
         * @param texts
         *            the texts {@link Texts} resources.
         */
        public static void retrieveResources(Texts texts) {
            for (m value : values()) {
                value.setText(texts);
            }
        }

        private String name;

        private String text;

        private m(String name) {
            this.name = name;
        }

        /**
         * Retrieve the text resource for the logging message.
         *
         * @param texts
         *            the texts {@link Texts} resources.
         */
        public void setText(Texts texts) {
            this.text = texts.getResource(name).getText();
        }

        @Override
        public String toString() {
            return text;
        }
    }

    /**
     * Create logger for {@link Foo}.
     */
    FooLogger() {
        super(Foo.class);
    }

    /**
     * Retrieves the text resources for the logging messages.
     *
     * @param texts
     *            the texts {@link Texts} resources.
     */
    public void retrieveResources(Texts texts) {
        m.retrieveResources(texts);
    }

    void loggingMessage(Foo foo) {
        if (isDebugEnabled()) {
            debug(logging_message_debug, foo);
        } else {
            info(logging_message_info, foo);
        }
    }
}
</pre>



Copyright ©2011 - 2018 "Advanced Natural Research Institute":https://anrisoftware.com/. All rights reserved.

